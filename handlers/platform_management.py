from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from sqlalchemy.exc import IntegrityError
from sqlalchemy.ext.asyncio import AsyncSession

from keyboards.inline import get_platform_management_keyboard, get_delete_platform_keyboard, PlatformCallback
from database.orm_query import orm_add_platform, orm_get_platforms, orm_delete_platform
from fsm.states import AddPlatform, DeletePlatform
from handlers.user_commands import cmd_start # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é

router = Router()

@router.callback_query(F.data == "manage_platforms")
async def manage_platforms(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    await state.clear()
    
    # –ò–ó–ú–ï–ù–ï–ù–û: –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º –ø–µ—Ä–µ–¥ –º–µ–Ω—é
    platforms = await orm_get_platforms(session)
    if platforms:
        platform_list = "\n".join([f"{i+1}) {p.name}" for i, p in enumerate(platforms)])
        text = f"<b>‚öôÔ∏è –í–∞—à–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:</b>\n{platform_list}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    else:
        text = "üòï –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
    await callback.message.edit_text(
        text,
        reply_markup=get_platform_management_keyboard()
    )
    await callback.answer()

# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã ---
@router.callback_query(F.data == "add_platform")
async def add_platform_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AddPlatform.name)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã. –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel")
    await callback.answer()

@router.message(AddPlatform.name)
async def add_platform_name(message: Message, state: FSMContext, session: AsyncSession):
    platform_name = message.text.strip()
    try:
        await orm_add_platform(session, platform_name)
        await message.answer(f"‚úÖ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ '<b>{platform_name}</b>' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    except IntegrityError:
        await message.answer(f"‚ö†Ô∏è –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '<b>{platform_name}</b>' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    await cmd_start(message, state)

# --- –£–¥–∞–ª–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã ---
@router.callback_query(F.data == "delete_platform_select")
async def delete_platform_select(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    platforms = await orm_get_platforms(session)
    if not platforms:
        await callback.answer("üòï –ù–µ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", show_alert=True)
        return
    
    await state.set_state(DeletePlatform.select)
    await callback.message.edit_text(
        "üëá –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ—ë:",
        reply_markup=get_delete_platform_keyboard(platforms)
    )
    await callback.answer()

@router.callback_query(DeletePlatform.select, PlatformCallback.filter(F.action == "delete"))
async def delete_platform_confirm(callback: CallbackQuery, callback_data: PlatformCallback, state: FSMContext, session: AsyncSession):
    try:
        await orm_delete_platform(session, callback_data.platform_id)
        await callback.answer("üóëÔ∏è –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ —É–¥–∞–ª–µ–Ω–∞!", show_alert=True)
        
        platforms = await orm_get_platforms(session)
        if not platforms:
            await callback.message.edit_text("‚úÖ –í—Å–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã —É–¥–∞–ª–µ–Ω—ã.", reply_markup=get_platform_management_keyboard())
        else:
            await callback.message.edit_text(
                "üëá –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ—ë:",
                reply_markup=get_delete_platform_keyboard(platforms)
            )
    except IntegrityError:
        await callback.answer(
            "‚ùå –û—à–∏–±–∫–∞: –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—É, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∑–∞–∫–∞–∑–∞—Ö.", show_alert=True
        )
    except Exception as e:
        await callback.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", show_alert=True)